name: "Draft new release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release in format yyyyy-MM, for example 2022-10'
        required: true

jobs:
  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    outputs:
      change_bq: ${{ steps.changes.outputs.bigquery }}
      change_db: ${{ steps.changes.outputs.databricks }}
      change_pg: ${{ steps.changes.outputs.postgres }}
      change_rs: ${{ steps.changes.outputs.redshift }}
      change_sf: ${{ steps.changes.outputs.snowflake }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Create release branch
        run: git checkout -b release/${{ github.event.inputs.version }}

      - name: "Build Changelog"
        uses: mikepenz/release-changelog-builder-action@v3
        id: github_release
        with:
          configuration: "configuration.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # This step is only necesary if some files are added/modified
      # - name: Commit changes
      #   uses: EndBug/add-and-commit@v9
      #   new_branch: release/${{ github.event.inputs.version }}

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            bigquery:
              - 'clouds/bigquery/**'
            databricks:
              - 'clouds/databricks/**'
            postgres:
              - 'clouds/postgres/**'
            redshift:
              - 'clouds/redshift/**'
            snowflake:
              - 'clouds/snowflake/**'
          base: stable
      - name: Push new branch
        run: git push origin release/${{ github.event.inputs.version }}
      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ github.event.inputs.version }}
          base: stable
          title: Release version ${{ github.event.inputs.version }}
          reviewers: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            Hi @${{ github.actor }}!
            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            I've updated the changelog and bumped the versions in the txt files in this commit: ${{ steps.make-commit.outputs.commit }}.
            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

  deploy-bq:
    needs: draft-new-release
    if: needs.draft-new-release.outputs.change_bq == 'true'
    name: "Deploy AT for BigQuery"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-bq
        run: |
          BQ_VERSION=$(cat clouds/bigquery/version)
          echo "deploy bigquery tag ${BQ_VERSION}"

  deploy-db:
    needs: draft-new-release
    if: needs.draft-new-release.outputs.change_db == 'true'
    name: "Deploy AT for Databricks"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-db
        run: |
          DB_VERSION=$(cat clouds/databricks/version)
          echo "deploy databricks tag ${DB_VERSION}"

  deploy-pg:
    needs: draft-new-release
    if: needs.draft-new-release.outputs.change_pg == 'true'
    name: "Deploy AT for Postgres"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-pg
        run: |
          PG_VERSION=$(cat clouds/postgres/version)
          echo "deploy postgres tag ${PG_VERSION}"

  deploy-rs:
    needs: draft-new-release
    if: needs.draft-new-release.outputs.change_rs == 'true'
    name: "Deploy AT for Redshift"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-rs
        run: |
          RS_VERSION=$(cat clouds/redshift/version)
          echo "deploy redshift tag ${RS_VERSION}"

  deploy-sf:
    needs: draft-new-release
    if: needs.draft-new-release.outputs.change_sf == 'true'
    name: "Deploy AT for Snowflake"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-sf
        run: |
          SF_VERSION=$(cat clouds/snowflake/version)
          echo "deploy snowflake tag ${SF_VERSION}}"



