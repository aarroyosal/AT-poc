name: "Publish new release"

on:
  pull_request:
    branches:
      - stable
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    outputs:
      change_bq: ${{ steps.changes.outputs.bigquery }}
      change_db: ${{ steps.changes.outputs.databricks }}
      change_pg: ${{ steps.changes.outputs.postgres }}
      change_rs: ${{ steps.changes.outputs.redshift }}
      change_sf: ${{ steps.changes.outputs.snowflake }}
    # only merged pull requests that begin with 'release/' or 'hotfix/' must trigger this job
    if: github.event.pull_request.merged == true &&
      (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix/'))
    steps:
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            bigquery:
              - 'clouds/bigquery/version'
            databricks:
              - 'clouds/databricks/version'
            postgres:
              - 'clouds/postgres/version'
            redshift:
              - 'clouds/redshift/version'
            snowflake:
              - 'clouds/snowflake/version'
          base: stable
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.event.pull_request.merge_commit_sha }}
          tag: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create pull request
        uses: repo-sync/pull-request@v2
        id: pull_request
        with:
          source_branch: "stable"
          destination_branch: "main"
          pr_title: Merge stable into main branch
          pr_body: |
            This PR merges the stable branch back into main.
            This is done to ensure that the updates that happend on the release branch, i.e. CHANGELOG updates are also present on the main branch.
      - name: Merge PR if possible
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          gh pr merge ${{steps.pull_request.outputs.pr_number }} --auto --delete-branch --squash --subject "Merge release ${{ env.RELEASE_VERSION }} into main branch"
      
  publish-bq:
    needs: release
    if: needs.release.outputs.change_bq == 'true'
    name: "Publish AT for BigQuery"
    uses: aarroyosal/AT-poc/.github/workflows/bigquery.yml@stable

  publish-db:
    needs: release
    if: needs.release.outputs.change_db == 'true'
    name: "Publish AT for Databricks"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-db
        run: |
          DB_VERSION=$(cat clouds/databricks/version)
          echo "publish databricks version ${DB_VERSION}"

  publish-pg:
    needs: release
    if: needs.release.outputs.change_pg == 'true'
    name: "Publish AT for Postgres"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-pg
        run: |
          PG_VERSION=$(cat clouds/postgres/version)
          echo "publish postgres version ${PG_VERSION}"

  publish-rs:
    needs: release
    if: needs.release.outputs.change_rs == 'true'
    name: "Publish AT for Redshift"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-rs
        run: |
          RS_VERSION=$(cat clouds/redshift/version)
          echo "publish redshift version ${RS_VERSION}"

  publish-sf:
    needs: release
    if: needs.release.outputs.change_sf == 'true'
    name: "Publish AT for Snowflake"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: deploy-sf
        run: |
          SF_VERSION=$(cat clouds/snowflake/version)
          echo "publish snowflake version ${SF_VERSION}}"